#include<stdio.h>
#include<ctype.h>
#include<string.h>
#include<malloc.h>

typedef struct hlist
{
	int info;
	int ncnt;
	hlist *beg;
	hlist *next;
	hlist *rear;
};

hlist *c_hlist(hlist *start)
{
	hlist *node = (hlist *)malloc(sizeof(hlist));
	start = node;
	node->next = (hlist *)malloc(sizeof(hlist));
	node->beg = node->next;
	node = node->next;
	node->next = '\0';
	int cnt = 0;
	char ch;
	do
	{
		++cnt;
		printf("\n\t Enter Information :  ");
		scanf("%d",&node->info);
		fflush(stdin);
		node->next='\0';
		
		printf("\n\t Do you want to Continue (Y/N) :");
		scanf("%c",&ch);
		if(toupper(ch) == 'Y')
		{
			node->next = (hlist *)malloc(sizeof(hlist));
			node = node->next;
			continue;
		}
		else
			break;
	}while(toupper(ch)=='Y');
	
	node->next = start;
	hlist *temp = start;
	temp->ncnt = cnt;
	temp->rear = node;
	
	return(start);
}

hlist ins_fst(hlist *start)
{
	if(start == NULL)
	{
		printf("\n\t Link list not created");
	}
	else
	{
		hlist *node = start;
		hlist *nnode = (hlist *)malloc(sizeof(hlist));
		printf("\n\t Enter the informartion :\t");
		scanf("%d",&nnode->info);
		
		++node->ncnt;
		nnode->next = node->next;
		node->next = nnode;
		node->beg = node->next;
	}
}

hlist ins_lst(hlist *start)
{
	if(start == NULL)
	{
		printf("\n\t Link list not created");
	}
	else
	{
		hlist *node = start;
		hlist *nnode = (hlist *)malloc(sizeof(hlist));
		printf("\n\t Enter the informartion :\t");
		scanf("%d",&nnode->info);
		
		++node->ncnt;
		node->rear = nnode;
		while(node->next != start)
		{
			node = node->next;
		}
				
		nnode->next = node->next;
		node->next = nnode;
	}
}

hlist ins_pos(hlist *start)
{
	if(start == NULL)
	{
		printf("\n\t Link list not created");
	}
	else
	{
		hlist *node = start;
		int pos;
		do
		{
			printf("\n\t Enter the position");
			scanf("%d",&pos);
			if((pos < 1) || (pos > node->ncnt))
			{
				printf("\n\t Invalid position ...");
				continue;
			}
			else
			  break;
		}while(1);
		
		if(pos == 1)
		ins_fst(start);
		else
			if(pos == node->ncnt)
				ins_lst(start);
			else
			{
				hlist *nnode = (hlist *)malloc(sizeof(hlist *));
				printf("\n\t Enter the information : \t");
				scanf("%d",&nnode->info);
				
				++node->ncnt;
				int i = 1;
				while(i < (pos))
				{
					node = node->next;
					++i;
				}
				nnode->next = node->next;
				node->next = nnode;
			}
	}
}

hlist del_fst(hlist *start)
{
	if(start == NULL)
	{
		printf("\n\t Link list not created");
	}
	else
	{
		hlist *node = start;
		hlist *temp = node->next;
		node->next = temp->next;
		free(temp);
		--node->ncnt;
	}
}

hlist del_lst(hlist *start)
{
	if(start == NULL)
	{
		printf("\n\t Link list not created");
	}
	else
	{
		hlist *node = start;
		hlist *prv, *nxt;
		prv = start;
		nxt = prv->next;
		while(nxt->next != start)
		{
			prv = prv->next;
			nxt = nxt->next;
		}
		prv->next = nxt->next;
		free(nxt);
		--node->ncnt;
		while(node->next != start)
		{
			node = node->next;
		}	
		node->rear = prv;
	}
}

hlist del_pos(hlist *start)
{
	if(start == NULL)
	{
		printf("\n\t Link list not created");
	}
	else
	{
		hlist *node = start;
		int pos;
		do
		{
			printf("\n\t Enter the position");
			scanf("%d",&pos);
			if((pos < 1) || (pos > node->ncnt))
			{
				printf("\n\t Invalid position ...");
				continue;
			}
			else
			  break;
		}while(1);
		
		if(pos == 1)
		del_fst(start);
		else
			if(pos == node->ncnt)
				del_lst(start);
			else
			{
				hlist *prv, *nxt;
				prv = start;
				nxt = prv->next;
				
				int i = 1;
				while(i < (pos))
				{
					prv = prv->next;
					nxt = prv->next;
					++i;
				}
				prv->next = nxt->next;
				free(nxt);
				--node->ncnt;
			}
	}
}

void trav(hlist *start)
{
	if(start == NULL)
	{
		printf("\n\t Link list not created");
		return;
	}
	else
	{
		hlist *node = start;
		printf("\n\t Address of Header node : \t%u",node);
		printf("\n\t Address of first node : \t%u",node->beg);
		printf("\n\t Address of last node : \t%u",node->rear);
		printf("\n\t Number of nodes : \t%u",node->ncnt);
		node = node->next;
		
		while(node != start)
		{
			printf("\n Address of current node : %u \t Value : %d \t Address of next node : %u", node, node->info, node->next);
			node = node->next;
		}
	}
}

int main()
{
	hlist *start = NULL;
	start = c_hlist(start);
	trav(start);
	printf("\n\t After inserting at first node");
	ins_fst(start);
	trav(start);
	printf("\n\t After inserting at last node");
	ins_lst(start);
	trav(start);
	printf("\n\t After inserting at desired node");
	ins_pos(start);
	trav(start);
	printf("\n\t Deleting at first node");
	del_fst(start);
	trav(start);
	printf("\n\t Deleting at last node");
	del_lst(start);
	trav(start);
	printf("\n\t Deleting desired node");
	del_pos(start);
	trav(start);
}
