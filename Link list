#include<stdio.h>
#include<malloc.h>
#include<string.h>
#include<ctype.h>

typedef struct list
{
	int roll;
	list *next;
};

void menu()
{
	printf("\n\t\t Main Menu");
	printf("\n\t 1. Create linked List");
	printf("\n\t 2. Traverse linked list");
	printf("\n\t 3. Insert node");
	printf("\n\t 4. Delete node");
	printf("\n\t 5. Search a node");
	printf("\n\t 6. Sort linked List");
	printf("\n\t 7. Exit");
	printf("\n\t Please enter your choice (1-7) :");
}

void ins_menu()
{
	printf("\n\t\t Insert Menu");
	printf("\n\t 1. Insert as first Node");
	printf("\n\t 2. Insert as last Node");
	printf("\n\t 3. Insert at desired Position");
	printf("\n\t 4. Exit");
	printf("\n\t Please Enter your choice (1-4) :");
}

void del_menu()
{
	printf("\n\t\t Delete Menu");
	printf("\n\t 1. Delete first Node");
	printf("\n\t 2. Delete last Node");
	printf("\n\t 3. Delete desired Position");
	printf("\n\t 4. Exit");
	printf("\n\t Please enter your choice (1-4) :");
}


list *c_list(list *start, int *n_cnt)
{
	list *node;
	node = (list *)malloc(sizeof(list));
	start = node;
	char ch;
	do
	{	
		++*n_cnt;
		printf("Enter the information : \t");
		scanf("%d",&node->roll);
		fflush(stdin);
		node->next = '\0';
		
		printf("\n Enter Y to create more node :\t");
		scanf("%c",&ch);
		fflush(stdin);
		if(toupper(ch) == 'Y')
		{
			node->next = (list *)malloc(sizeof(list));
			node = node->next;
			continue;
		}
		else
		  break;
	}while(toupper(ch) == 'Y');
	
	return(start);
}

list *ins_fst(list *start, int *n_cnt)
{
	if(start == NULL)
	{
		printf("\n link list not creaated");
	}
	else
	{
		++*n_cnt;
		list *nnode = (list *)malloc(sizeof(list));
		printf("Enter the informaion");
		scanf("%d",&nnode->roll);
		list *node = start;
		nnode->next = node;
		start = nnode;
	}
	return(start);
}

list *ins_lst(list *start, int *n_cnt)
{
	if(start == '\0')
	{
		printf("link list not created");
	}
	else
	{
		++*n_cnt;
		list *nnode = (list *)malloc(sizeof(list));
		printf("enter the information :");
		scanf("%d",&nnode->roll);
		list *node = start;
		while(node->next != '\0')
		{
			node = node->next;
		}
		nnode->next = node->next;
		node->next = nnode;
	}
	//return(start);
}

list *ins_des(list *start, int *n_cnt)
{		
	int pos;
	printf("\nEnter the position :\t");
	scanf("%d",&pos);
	while(1)
	{
		if((pos < 1) || (pos > *n_cnt))
		{
			printf("\nPosition not valid ...");
			scanf("%d",&pos);
			continue;
		}
		else
		  break;
	}
	
	if(pos == 1)
	start = ins_fst(start, n_cnt);
	else
	if(pos == *n_cnt)
	ins_lst(start, n_cnt);
	else
	{
		list *nnode = (list *)malloc(sizeof(list));
		printf("\n Link list created :");
		scanf("%d",&nnode->roll);
		list *node = start;
		int i = 1;
		while(i < pos - 1)
		{
			node = node->next;
			nnode->next = node->next;
			node->next = nnode;
			++i;
		}
	}
	return(start);
}

list *del_fst(list *start, int *n_cnt)
{
	if(start == NULL)
	{
		printf("\n Link list not created");
	}
	else
	{
		list *node = start;
		start = node->next;
		free(node);
		--*n_cnt;
	}
	return(start);
}

void del_lst(list *start, int *n_cnt)
{
	if(start==NULL)
	{
		printf("\n Linked List not created ...");
	}
	else
	{
		list *prv, *nxt;
		prv = start;
		nxt = prv->next;
		while(nxt->next != '\0')
		{
			prv = prv->next;
			nxt = nxt->next;
		}
		prv->next = nxt->next;
		free(nxt);
		--*n_cnt;
	}
}

list *del_pos(list *start, int *n_cnt)
{
	if(start==NULL)
	{
		printf("\n Linked List not created ...");
	}
	else
	{
		int pos;
		do
		{
			printf("\nEnter the position....\t");
			scanf("%d",&pos);
			if((pos < 1) || (pos > *n_cnt))
			{
				printf("\nInvalid position....");
				continue;
			}
			else
			  break;
		}while(1);
		
		if(pos == 1)
		start = del_fst(start, n_cnt);
		else
		if(pos == *n_cnt)
		del_lst(start, n_cnt);
		else
		{
			list *node = start;
			list *nxt = node->next;
			int i = 1;
			while(i < pos)
			{
				node = node->next;
				nxt = node->next;
				++i;
			}
			node->next = nxt;
			free(node);
			--*n_cnt;
		}
	}
	return(start);
}

void trav(list *start)
{
	if(start == NULL)
	{
		printf("Link list not created");
	}
	else
	{	
		list *node;
		node = start;
		while(node != '\0')
		{
			printf("Address of the node : \t%u\n roll : \t%d\n address of next node : \t%d\n\n",node,node->roll,node->next);
			node = node->next;
		}
	}
}

int main()
{
	list *start = NULL;
	int cnt = 0;
	start = c_list(start, &cnt);
	trav(start);
	printf("After inserting before first node \n");
	start = ins_fst(start, &cnt);
	trav(start);
	printf("Inserting new node at last\n");
	ins_lst(start, &cnt);
	trav(start);
	printf("Inserting new node at desired position\n");
	start = ins_des(start, &cnt);
	trav(start);
	printf("Deleting first node\n");
	start = del_fst(start, &cnt);
	trav(start);
	printf("Deleting last node\n");
	del_lst(start, &cnt);
	trav(start);
/*	printf("Deleting desired node\n");
	start = del_pos(start, &cnt);
	trav(start);*/
}
