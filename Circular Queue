#include<stdio.h>
#include<ctype.h>
#include<malloc.h>
#include<string.h>
#include<math.h>
#define SIZE 5

void menu()
{
	printf("\n \t\t\t Circular Queue Operation");
	printf("\n\t\t 1. Create Queue");
	printf("\n\t\t 2. Traverse Queue");
	printf("\n\t\t 3. Push Element");
	printf("\n\t\t 4. Pop Operation");
	printf("\n\t\t 5. Peek Operation");
	printf("\n\t\t 6. Exit");
	printf("\n enter Your choice (1-6) :");
}

void cr_queue(int queue[], int *frnt, int *rear)
{
	char ch;
	do
	{
		if((*frnt==-1)&&(*rear==-1))
		{
			*frnt=0;
			*rear=0;
		}
		else
		{
			++*rear;
		}
		printf("\n Enter Information :");
		scanf("%d", &queue[*rear]);
		fflush(stdin);
		printf("\n Do You want to continue (Y/N) :");
		scanf("%c", &ch);
		fflush(stdin);		
		if(toupper(ch)=='Y')
		{
			if(*rear==(SIZE-1))
			{
				printf("\n Array Full ... Element cannot be inserted ..");
				break;
			}
			else
				continue;
		}
		else
			break;		
	}while(toupper(ch)=='Y');
}

void trav(int queue[], int frnt, int rear)
{
	int i;
	if((frnt==-1)&&(rear==-1))
	{
		printf("\n Queue is Empty ....");
	}
	else
		if((frnt<=rear)&&(rear<=(SIZE-1)))
		{			
			for(i=frnt; i<=rear; ++i)
			{
				printf("\n arr[%d]=%d", i, queue[i]);
			}
		}
		else
			if(rear<=frnt)
			{
				for(i=frnt; i<=(SIZE-1); ++i)
					printf("\n arr[%d]=%d", i, queue[i]);
					
				for(i=0; i<=rear; ++i)
					printf("\n arr[%d]=%d", i, queue[i]);
			}
}

void push(int queue[], int *frnt, int *rear)
{
	if(((*frnt==0) &&(*rear==(SIZE-1)))||((*rear<*frnt)&& (abs(*frnt-*rear)==1)))
	{
		printf("\n Array Full Element cannot be inserted");
	}
	else
	{
		if((*frnt==-1)&&(*rear==-1))
		{
			*frnt=0;
			*rear=0;
		}		
		else
			if(((*frnt<*rear)&&(*rear<(SIZE-1))) || ((*frnt>*rear)&&(*frnt<=(SIZE-1))) || (*frnt==*rear))
			{
				++*rear;
			}
			else
				if((*frnt>0)&&(*rear==(SIZE-1)))
					*rear=0;
					
		printf("\n Enter Information :");
		scanf("%d", &queue[*rear]);			
	}			
}

void pop(int *frnt, int *rear)
{
	if((*frnt==-1)&&(*rear==-1))
	{
		printf("\n Queue is Empty ... Try Again");
	}	
	else
		if(*frnt==*rear)
		{
			*frnt=-1;
			*rear=-1;
		}
		else
			if(((*frnt<*rear)&&(*rear<=(SIZE-1)))|| ((*frnt>*rear)&&(*frnt<(SIZE-1))))
				++*frnt;
			else
				if((*rear>0)&&(*frnt==(SIZE-1)))
					*frnt=0;
}


void peek(int queue[], int frnt, int rear)
{
	if((frnt==-1)&&(rear==-1))
	{
		printf("\n Queue is Empty ... Try Again");
	}	
	else
	{
		printf("\n Element at the top");
		printf("\n arr[%d]=%d", frnt, queue[frnt]);
	}
}

int main()
{
	int ch; 
	int queue[SIZE];
	do
	{
		do
		{
			menu();
			scanf("%d", &ch);
			if((ch<1)||(ch>6))
			{
				printf("\n Invalid Choice .. Try again");
				continue;
			}
			else
				break;
		}while(1);
		
		switch(ch)
		{
			case 1:
				frnt=-1, rear=-1;
				cr_queue(queue, &frnt, &rear);
				printf("\n Front : %d \t Rear : %d ", frnt, rear);
				break;
			case 2:
				trav(queue, frnt, rear);
				printf("\n Front : %d \t Rear : %d ", frnt, rear);
				break;
			case 3:
				push(queue, &frnt, &rear);
				printf("\n Front : %d \t Rear : %d ", frnt, rear);
				break;
			case 4:
				pop(&frnt, &rear);
				printf("\n Front : %d \t Rear : %d ", frnt, rear);
				break;
			case 5:
				peek(queue, frnt, rear);
				printf("\n Front : %d \t Rear : %d ", frnt, rear);
				break;
		}
	}while(ch<6);
}
