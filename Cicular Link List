#include<stdio.h>
#include<string.h>
#include<ctype.h>
#include<malloc.h>

typedef struct list
{
	int info;
	list *next;
};

list *c_list(list *start, int *ncnt)
{
	list *node = (list *)malloc(sizeof(list));
	start = node;
	char ch;
	
	do
	{
		++*ncnt;
		printf("\n\tEnter the information :\t");
		scanf("%d",&node->info);
		fflush(stdin);
		node->next = '\0';
		
		printf("\n\tEnter (Y|N) to continue :\t");
		scanf("%c",&ch);
		fflush(stdin);
		if(toupper(ch) == 'Y')
		{
			node->next = (list *)malloc(sizeof(list));
			node = node->next;
			continue;
		}
		else
		  break;
	}while(toupper(ch) == 'Y');
	node->next = start;
	
	return(start);
}

list *ins_fst(list *start, int *ncnt)
{
	if(start == NULL)
	{
		printf("\n\tLink list not created.....");
	}
	else
	{
		++*ncnt;
		list *nnode = (list *)malloc(sizeof(list));
		printf("\n\tEnter the information at first node :\t");
		scanf("%d",&nnode->info);
		
		list *node = start;
		nnode->next = node;
		start = nnode;
		
		node = start;
		int i = 1;
		while(i < *ncnt)
		{
			node = node->next;
			++i;
		}
		
		node->next = start;
	}		
	return(start);
}

void ins_lst(list *start, int *ncnt)
{
	if(start == NULL)
	{
		printf("\n\tLink list not created.....");
	}
	else
	{
		list *node = start;
		int i = 1;
		while(i < *ncnt)
		{
			node = node->next;
			++i;
		}
		
		list *nnode = (list *)malloc(sizeof(list));
		printf("\n\tEnter the information :\t");
		scanf("%d",&nnode->info);
		nnode->next = node->next;
		node->next = nnode;
		nnode->next = start;
	}
}

void trav(list *start)
{
	if(start == NULL)
	{
		printf("\n\tLink list not created.....");
	}
	else
	{
		list *node = start;
		do
		{
			printf("\n\tAddress of current node : \t%u\n\t Information : \t%d\n\t Address of next node : \t%u\n",node, node->info, node->next);
			node =node->next;
		}while(node != start);
	}
}

list *ins_pos(list *start, int *ncnt)
{
	if(start == NULL)
	{
		printf("\n\tLink list not created.....");
	}
	else
	{
		int pos = 0;
		do
		{
			printf("\n Enter Position to insert node to : ");
			scanf("%d", &pos);
			
			if((pos < 1) || (pos > *ncnt))
			{
				printf("\n Invalid Position Try again ....");
				continue;
			}
			else
				break;
		}while(1);
	
		if(pos == 1)
			start = ins_fst(start, ncnt);
		else
			if(pos == *ncnt)	
				ins_lst(start, ncnt);
			else
			{
				++*ncnt;
				list *nnode = (list *)malloc(sizeof(list));
				printf("\n\t Enter the information :\t");
				scanf("%d",&nnode->info);
				
				list *node = start;
				int i = 1;
				while(i < pos - 1)
				{
					node = node->next;
					++i;
				}
				nnode->next = node->next;
				node->next = nnode;
			}	
	}
	return(start);
}

list *del_fst(list *start, int *frnt, int *rear, int *ncnt)
{
	if(start == NULL)
	{
		printf("\n\t Link list not created");
	}
	else
	{
		list *node = start;
		start = node->next;
		free(node);
		--*frnt;
		int i = 1;
		node = start;
		while(i < *ncnt)
		{
			node = node->next;
			++i;
		}
		node->next = start;
	}
	return(start);
}

list *del_lst(list *start, int *ncnt)
{
	if(start == NULL)
	{
		printf("\n\t Link list not created");
	}
	else
	{
		list *node = start;
		int i = 1;
		while(i < *ncnt)
		{
			node = node->next;
			++i;
		}
		free(node);
		--*rear;
		i = 1;
		while(i < *ncnt)
		{
			node = node->next;
			++i;
		}
		node->next = start;
	}
	return(start);
}

list *del_pos(list *start, int *ncnt)
{
	if(start == NULL)
	{
		printf("\n\t Link list not created");
	}
	else
	{
		int pos = 0;
		do
		{
			printf("\n Enter Position to insert node to : ");
			scanf("%d", &pos);
			
			if((pos < 1) || (pos > *ncnt))
			{
				printf("\n Invalid Position Try again ....");
				continue;
			}
			else
				break;
		}while(1);
	
		if(pos == 1)
			start = del_fst(start, ncnt);
		else
			if(pos == *ncnt)	
				del_lst(start, ncnt);
			else
			{
				int i;					
				list *prv, *nxt;
				prv = start;
				nxt = prv->next;					
				for(i = 1; i < (pos - 1); ++i)
				{
					prv = prv->next;
					nxt = nxt->next;
				}
				prv->next = nxt->next;
				free(nxt);
			}
	}
	return(start);
}

int main()
{
	list *start = '\0';
	int cnt = 0;
	int frnt = -1, rear = -1;
	start = c_list(start, &cnt);
	trav(start);
	printf("\n\t Inserting at first position  \n");
	start = ins_fst(start, &cnt);
	trav(start);
	printf("\n\t Inserting at last position  \n");
	ins_lst(start, , &cnt);
	trav(start);
	printf("\n\t Inserting at desired position  \n");
	start = ins_pos(start, &cnt);
	trav(start);
	printf("\n\t Delete at first position  \n");
	start = del_fst(start, &cnt);
	trav(start);
	printf("\n\t Delete at last position  \n");
	start = del_lst(start, &cnt);
	trav(start);
	printf("\n\t Delete at desired position  \n");
	start = del_pos(start, &cnt);
	trav(start);
}
